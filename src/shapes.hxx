// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SHAPES_HXX
#define SHAPES_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class delta_tType;
class end_timeType;
class factorType;
class domain_sizeType;
class rcutoffType;
class x1_boundary_conditionType;
class x2_boundary_conditionType;
class y1_boundary_conditionType;
class y2_boundary_conditionType;
class z1_boundary_conditionType;
class z2_boundary_conditionType;
class brownian_motionType;
class initial_temperatureType;
class n_thermostatType;
class target_temperatureType;
class temperature_differenceType;
class gravitationType;
class r0Type;
class kType;
class fz_upType;
class parallelisation_methodType;
class force_calculation_methodType;
class rlType;
class settingsType;
class write_checkpointType;
class read_checkpointType;
class write_checkpoint_timeType;
class checkpointType;
class typeType;
class epsilonType;
class sigmaType;
class centreType;
class radiusType;
class velocityType;
class massType;
class hType;
class sphereType;
class right_top_pointType;
class side_lengthsType;
class membraneType;
class cuboidType;
class shapesType;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class delta_tType: public ::xml_schema::string
{
  public:
  // t
  //
  typedef ::xml_schema::string t_type;
  typedef ::xsd::cxx::tree::optional< t_type > t_optional;
  typedef ::xsd::cxx::tree::traits< t_type, char > t_traits;

  const t_optional&
  t () const;

  t_optional&
  t ();

  void
  t (const t_type& x);

  void
  t (const t_optional& x);

  void
  t (::std::unique_ptr< t_type > p);

  // Constructors.
  //
  delta_tType ();

  delta_tType (const char*);

  delta_tType (const ::std::string&);

  delta_tType (const ::xml_schema::string&);

  delta_tType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  delta_tType (const delta_tType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual delta_tType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  delta_tType&
  operator= (const delta_tType& x);

  virtual 
  ~delta_tType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  t_optional t_;
};

class end_timeType: public ::xml_schema::string
{
  public:
  // t
  //
  typedef ::xml_schema::string t_type;
  typedef ::xsd::cxx::tree::optional< t_type > t_optional;
  typedef ::xsd::cxx::tree::traits< t_type, char > t_traits;

  const t_optional&
  t () const;

  t_optional&
  t ();

  void
  t (const t_type& x);

  void
  t (const t_optional& x);

  void
  t (::std::unique_ptr< t_type > p);

  // Constructors.
  //
  end_timeType ();

  end_timeType (const char*);

  end_timeType (const ::std::string&);

  end_timeType (const ::xml_schema::string&);

  end_timeType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  end_timeType (const end_timeType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual end_timeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  end_timeType&
  operator= (const end_timeType& x);

  virtual 
  ~end_timeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  t_optional t_;
};

class factorType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  factorType ();

  factorType (const char*);

  factorType (const ::std::string&);

  factorType (const ::xml_schema::string&);

  factorType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  factorType (const factorType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual factorType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  factorType&
  operator= (const factorType& x);

  virtual 
  ~factorType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class domain_sizeType: public ::xml_schema::string
{
  public:
  // x
  //
  typedef ::xml_schema::string x_type;
  typedef ::xsd::cxx::tree::optional< x_type > x_optional;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_optional&
  x () const;

  x_optional&
  x ();

  void
  x (const x_type& x);

  void
  x (const x_optional& x);

  void
  x (::std::unique_ptr< x_type > p);

  // y
  //
  typedef ::xml_schema::string y_type;
  typedef ::xsd::cxx::tree::optional< y_type > y_optional;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_optional&
  y () const;

  y_optional&
  y ();

  void
  y (const y_type& x);

  void
  y (const y_optional& x);

  void
  y (::std::unique_ptr< y_type > p);

  // z
  //
  typedef ::xml_schema::string z_type;
  typedef ::xsd::cxx::tree::optional< z_type > z_optional;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_optional&
  z () const;

  z_optional&
  z ();

  void
  z (const z_type& x);

  void
  z (const z_optional& x);

  void
  z (::std::unique_ptr< z_type > p);

  // Constructors.
  //
  domain_sizeType ();

  domain_sizeType (const char*);

  domain_sizeType (const ::std::string&);

  domain_sizeType (const ::xml_schema::string&);

  domain_sizeType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  domain_sizeType (const domain_sizeType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual domain_sizeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  domain_sizeType&
  operator= (const domain_sizeType& x);

  virtual 
  ~domain_sizeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  x_optional x_;
  y_optional y_;
  z_optional z_;
};

class rcutoffType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  rcutoffType ();

  rcutoffType (const char*);

  rcutoffType (const ::std::string&);

  rcutoffType (const ::xml_schema::string&);

  rcutoffType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  rcutoffType (const rcutoffType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual rcutoffType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  rcutoffType&
  operator= (const rcutoffType& x);

  virtual 
  ~rcutoffType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class x1_boundary_conditionType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  x1_boundary_conditionType ();

  x1_boundary_conditionType (const char*);

  x1_boundary_conditionType (const ::std::string&);

  x1_boundary_conditionType (const ::xml_schema::string&);

  x1_boundary_conditionType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  x1_boundary_conditionType (const x1_boundary_conditionType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual x1_boundary_conditionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  x1_boundary_conditionType&
  operator= (const x1_boundary_conditionType& x);

  virtual 
  ~x1_boundary_conditionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class x2_boundary_conditionType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  x2_boundary_conditionType ();

  x2_boundary_conditionType (const char*);

  x2_boundary_conditionType (const ::std::string&);

  x2_boundary_conditionType (const ::xml_schema::string&);

  x2_boundary_conditionType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  x2_boundary_conditionType (const x2_boundary_conditionType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual x2_boundary_conditionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  x2_boundary_conditionType&
  operator= (const x2_boundary_conditionType& x);

  virtual 
  ~x2_boundary_conditionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class y1_boundary_conditionType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  y1_boundary_conditionType ();

  y1_boundary_conditionType (const char*);

  y1_boundary_conditionType (const ::std::string&);

  y1_boundary_conditionType (const ::xml_schema::string&);

  y1_boundary_conditionType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  y1_boundary_conditionType (const y1_boundary_conditionType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual y1_boundary_conditionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  y1_boundary_conditionType&
  operator= (const y1_boundary_conditionType& x);

  virtual 
  ~y1_boundary_conditionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class y2_boundary_conditionType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  y2_boundary_conditionType ();

  y2_boundary_conditionType (const char*);

  y2_boundary_conditionType (const ::std::string&);

  y2_boundary_conditionType (const ::xml_schema::string&);

  y2_boundary_conditionType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  y2_boundary_conditionType (const y2_boundary_conditionType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual y2_boundary_conditionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  y2_boundary_conditionType&
  operator= (const y2_boundary_conditionType& x);

  virtual 
  ~y2_boundary_conditionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class z1_boundary_conditionType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  z1_boundary_conditionType ();

  z1_boundary_conditionType (const char*);

  z1_boundary_conditionType (const ::std::string&);

  z1_boundary_conditionType (const ::xml_schema::string&);

  z1_boundary_conditionType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  z1_boundary_conditionType (const z1_boundary_conditionType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual z1_boundary_conditionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  z1_boundary_conditionType&
  operator= (const z1_boundary_conditionType& x);

  virtual 
  ~z1_boundary_conditionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class z2_boundary_conditionType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  z2_boundary_conditionType ();

  z2_boundary_conditionType (const char*);

  z2_boundary_conditionType (const ::std::string&);

  z2_boundary_conditionType (const ::xml_schema::string&);

  z2_boundary_conditionType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  z2_boundary_conditionType (const z2_boundary_conditionType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual z2_boundary_conditionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  z2_boundary_conditionType&
  operator= (const z2_boundary_conditionType& x);

  virtual 
  ~z2_boundary_conditionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class brownian_motionType: public ::xml_schema::string
{
  public:
  // bol
  //
  typedef ::xml_schema::string bol_type;
  typedef ::xsd::cxx::tree::optional< bol_type > bol_optional;
  typedef ::xsd::cxx::tree::traits< bol_type, char > bol_traits;

  const bol_optional&
  bol () const;

  bol_optional&
  bol ();

  void
  bol (const bol_type& x);

  void
  bol (const bol_optional& x);

  void
  bol (::std::unique_ptr< bol_type > p);

  // Constructors.
  //
  brownian_motionType ();

  brownian_motionType (const char*);

  brownian_motionType (const ::std::string&);

  brownian_motionType (const ::xml_schema::string&);

  brownian_motionType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  brownian_motionType (const brownian_motionType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual brownian_motionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  brownian_motionType&
  operator= (const brownian_motionType& x);

  virtual 
  ~brownian_motionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  bol_optional bol_;
};

class initial_temperatureType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  initial_temperatureType ();

  initial_temperatureType (const char*);

  initial_temperatureType (const ::std::string&);

  initial_temperatureType (const ::xml_schema::string&);

  initial_temperatureType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  initial_temperatureType (const initial_temperatureType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual initial_temperatureType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  initial_temperatureType&
  operator= (const initial_temperatureType& x);

  virtual 
  ~initial_temperatureType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class n_thermostatType: public ::xml_schema::string
{
  public:
  // t
  //
  typedef ::xml_schema::string t_type;
  typedef ::xsd::cxx::tree::optional< t_type > t_optional;
  typedef ::xsd::cxx::tree::traits< t_type, char > t_traits;

  const t_optional&
  t () const;

  t_optional&
  t ();

  void
  t (const t_type& x);

  void
  t (const t_optional& x);

  void
  t (::std::unique_ptr< t_type > p);

  // Constructors.
  //
  n_thermostatType ();

  n_thermostatType (const char*);

  n_thermostatType (const ::std::string&);

  n_thermostatType (const ::xml_schema::string&);

  n_thermostatType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  n_thermostatType (const n_thermostatType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual n_thermostatType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  n_thermostatType&
  operator= (const n_thermostatType& x);

  virtual 
  ~n_thermostatType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  t_optional t_;
};

class target_temperatureType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  target_temperatureType ();

  target_temperatureType (const char*);

  target_temperatureType (const ::std::string&);

  target_temperatureType (const ::xml_schema::string&);

  target_temperatureType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  target_temperatureType (const target_temperatureType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual target_temperatureType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  target_temperatureType&
  operator= (const target_temperatureType& x);

  virtual 
  ~target_temperatureType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class temperature_differenceType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  temperature_differenceType ();

  temperature_differenceType (const char*);

  temperature_differenceType (const ::std::string&);

  temperature_differenceType (const ::xml_schema::string&);

  temperature_differenceType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  temperature_differenceType (const temperature_differenceType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  virtual temperature_differenceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  temperature_differenceType&
  operator= (const temperature_differenceType& x);

  virtual 
  ~temperature_differenceType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class gravitationType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  gravitationType ();

  gravitationType (const char*);

  gravitationType (const ::std::string&);

  gravitationType (const ::xml_schema::string&);

  gravitationType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  gravitationType (const gravitationType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual gravitationType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  gravitationType&
  operator= (const gravitationType& x);

  virtual 
  ~gravitationType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class r0Type: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  r0Type ();

  r0Type (const char*);

  r0Type (const ::std::string&);

  r0Type (const ::xml_schema::string&);

  r0Type (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  r0Type (const r0Type& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual r0Type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  r0Type&
  operator= (const r0Type& x);

  virtual 
  ~r0Type ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class kType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  kType ();

  kType (const char*);

  kType (const ::std::string&);

  kType (const ::xml_schema::string&);

  kType (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  kType (const kType& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual kType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  kType&
  operator= (const kType& x);

  virtual 
  ~kType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class fz_upType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  fz_upType ();

  fz_upType (const char*);

  fz_upType (const ::std::string&);

  fz_upType (const ::xml_schema::string&);

  fz_upType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  fz_upType (const fz_upType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual fz_upType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  fz_upType&
  operator= (const fz_upType& x);

  virtual 
  ~fz_upType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class parallelisation_methodType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  parallelisation_methodType ();

  parallelisation_methodType (const char*);

  parallelisation_methodType (const ::std::string&);

  parallelisation_methodType (const ::xml_schema::string&);

  parallelisation_methodType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  parallelisation_methodType (const parallelisation_methodType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  virtual parallelisation_methodType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  parallelisation_methodType&
  operator= (const parallelisation_methodType& x);

  virtual 
  ~parallelisation_methodType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class force_calculation_methodType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  force_calculation_methodType ();

  force_calculation_methodType (const char*);

  force_calculation_methodType (const ::std::string&);

  force_calculation_methodType (const ::xml_schema::string&);

  force_calculation_methodType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  force_calculation_methodType (const force_calculation_methodType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual force_calculation_methodType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  force_calculation_methodType&
  operator= (const force_calculation_methodType& x);

  virtual 
  ~force_calculation_methodType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class rlType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  rlType ();

  rlType (const char*);

  rlType (const ::std::string&);

  rlType (const ::xml_schema::string&);

  rlType (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  rlType (const rlType& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual rlType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  rlType&
  operator= (const rlType& x);

  virtual 
  ~rlType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class settingsType: public ::xml_schema::type
{
  public:
  // delta-t
  //
  typedef ::delta_tType delta_t_type;
  typedef ::xsd::cxx::tree::traits< delta_t_type, char > delta_t_traits;

  const delta_t_type&
  delta_t () const;

  delta_t_type&
  delta_t ();

  void
  delta_t (const delta_t_type& x);

  void
  delta_t (::std::unique_ptr< delta_t_type > p);

  // end-time
  //
  typedef ::end_timeType end_time_type;
  typedef ::xsd::cxx::tree::traits< end_time_type, char > end_time_traits;

  const end_time_type&
  end_time () const;

  end_time_type&
  end_time ();

  void
  end_time (const end_time_type& x);

  void
  end_time (::std::unique_ptr< end_time_type > p);

  // factor
  //
  typedef ::factorType factor_type;
  typedef ::xsd::cxx::tree::traits< factor_type, char > factor_traits;

  const factor_type&
  factor () const;

  factor_type&
  factor ();

  void
  factor (const factor_type& x);

  void
  factor (::std::unique_ptr< factor_type > p);

  // domain-size
  //
  typedef ::domain_sizeType domain_size_type;
  typedef ::xsd::cxx::tree::traits< domain_size_type, char > domain_size_traits;

  const domain_size_type&
  domain_size () const;

  domain_size_type&
  domain_size ();

  void
  domain_size (const domain_size_type& x);

  void
  domain_size (::std::unique_ptr< domain_size_type > p);

  // rcutoff
  //
  typedef ::rcutoffType rcutoff_type;
  typedef ::xsd::cxx::tree::traits< rcutoff_type, char > rcutoff_traits;

  const rcutoff_type&
  rcutoff () const;

  rcutoff_type&
  rcutoff ();

  void
  rcutoff (const rcutoff_type& x);

  void
  rcutoff (::std::unique_ptr< rcutoff_type > p);

  // x1-boundary-condition
  //
  typedef ::x1_boundary_conditionType x1_boundary_condition_type;
  typedef ::xsd::cxx::tree::traits< x1_boundary_condition_type, char > x1_boundary_condition_traits;

  const x1_boundary_condition_type&
  x1_boundary_condition () const;

  x1_boundary_condition_type&
  x1_boundary_condition ();

  void
  x1_boundary_condition (const x1_boundary_condition_type& x);

  void
  x1_boundary_condition (::std::unique_ptr< x1_boundary_condition_type > p);

  // x2-boundary-condition
  //
  typedef ::x2_boundary_conditionType x2_boundary_condition_type;
  typedef ::xsd::cxx::tree::traits< x2_boundary_condition_type, char > x2_boundary_condition_traits;

  const x2_boundary_condition_type&
  x2_boundary_condition () const;

  x2_boundary_condition_type&
  x2_boundary_condition ();

  void
  x2_boundary_condition (const x2_boundary_condition_type& x);

  void
  x2_boundary_condition (::std::unique_ptr< x2_boundary_condition_type > p);

  // y1-boundary-condition
  //
  typedef ::y1_boundary_conditionType y1_boundary_condition_type;
  typedef ::xsd::cxx::tree::traits< y1_boundary_condition_type, char > y1_boundary_condition_traits;

  const y1_boundary_condition_type&
  y1_boundary_condition () const;

  y1_boundary_condition_type&
  y1_boundary_condition ();

  void
  y1_boundary_condition (const y1_boundary_condition_type& x);

  void
  y1_boundary_condition (::std::unique_ptr< y1_boundary_condition_type > p);

  // y2-boundary-condition
  //
  typedef ::y2_boundary_conditionType y2_boundary_condition_type;
  typedef ::xsd::cxx::tree::traits< y2_boundary_condition_type, char > y2_boundary_condition_traits;

  const y2_boundary_condition_type&
  y2_boundary_condition () const;

  y2_boundary_condition_type&
  y2_boundary_condition ();

  void
  y2_boundary_condition (const y2_boundary_condition_type& x);

  void
  y2_boundary_condition (::std::unique_ptr< y2_boundary_condition_type > p);

  // z1-boundary-condition
  //
  typedef ::z1_boundary_conditionType z1_boundary_condition_type;
  typedef ::xsd::cxx::tree::traits< z1_boundary_condition_type, char > z1_boundary_condition_traits;

  const z1_boundary_condition_type&
  z1_boundary_condition () const;

  z1_boundary_condition_type&
  z1_boundary_condition ();

  void
  z1_boundary_condition (const z1_boundary_condition_type& x);

  void
  z1_boundary_condition (::std::unique_ptr< z1_boundary_condition_type > p);

  // z2-boundary-condition
  //
  typedef ::z2_boundary_conditionType z2_boundary_condition_type;
  typedef ::xsd::cxx::tree::traits< z2_boundary_condition_type, char > z2_boundary_condition_traits;

  const z2_boundary_condition_type&
  z2_boundary_condition () const;

  z2_boundary_condition_type&
  z2_boundary_condition ();

  void
  z2_boundary_condition (const z2_boundary_condition_type& x);

  void
  z2_boundary_condition (::std::unique_ptr< z2_boundary_condition_type > p);

  // brownian-motion
  //
  typedef ::brownian_motionType brownian_motion_type;
  typedef ::xsd::cxx::tree::traits< brownian_motion_type, char > brownian_motion_traits;

  const brownian_motion_type&
  brownian_motion () const;

  brownian_motion_type&
  brownian_motion ();

  void
  brownian_motion (const brownian_motion_type& x);

  void
  brownian_motion (::std::unique_ptr< brownian_motion_type > p);

  // initial-temperature
  //
  typedef ::initial_temperatureType initial_temperature_type;
  typedef ::xsd::cxx::tree::traits< initial_temperature_type, char > initial_temperature_traits;

  const initial_temperature_type&
  initial_temperature () const;

  initial_temperature_type&
  initial_temperature ();

  void
  initial_temperature (const initial_temperature_type& x);

  void
  initial_temperature (::std::unique_ptr< initial_temperature_type > p);

  // n-thermostat
  //
  typedef ::n_thermostatType n_thermostat_type;
  typedef ::xsd::cxx::tree::traits< n_thermostat_type, char > n_thermostat_traits;

  const n_thermostat_type&
  n_thermostat () const;

  n_thermostat_type&
  n_thermostat ();

  void
  n_thermostat (const n_thermostat_type& x);

  void
  n_thermostat (::std::unique_ptr< n_thermostat_type > p);

  // target-temperature
  //
  typedef ::target_temperatureType target_temperature_type;
  typedef ::xsd::cxx::tree::traits< target_temperature_type, char > target_temperature_traits;

  const target_temperature_type&
  target_temperature () const;

  target_temperature_type&
  target_temperature ();

  void
  target_temperature (const target_temperature_type& x);

  void
  target_temperature (::std::unique_ptr< target_temperature_type > p);

  // temperature-difference
  //
  typedef ::temperature_differenceType temperature_difference_type;
  typedef ::xsd::cxx::tree::traits< temperature_difference_type, char > temperature_difference_traits;

  const temperature_difference_type&
  temperature_difference () const;

  temperature_difference_type&
  temperature_difference ();

  void
  temperature_difference (const temperature_difference_type& x);

  void
  temperature_difference (::std::unique_ptr< temperature_difference_type > p);

  // gravitation
  //
  typedef ::gravitationType gravitation_type;
  typedef ::xsd::cxx::tree::traits< gravitation_type, char > gravitation_traits;

  const gravitation_type&
  gravitation () const;

  gravitation_type&
  gravitation ();

  void
  gravitation (const gravitation_type& x);

  void
  gravitation (::std::unique_ptr< gravitation_type > p);

  // r0
  //
  typedef ::r0Type r0_type;
  typedef ::xsd::cxx::tree::traits< r0_type, char > r0_traits;

  const r0_type&
  r0 () const;

  r0_type&
  r0 ();

  void
  r0 (const r0_type& x);

  void
  r0 (::std::unique_ptr< r0_type > p);

  // k
  //
  typedef ::kType k_type;
  typedef ::xsd::cxx::tree::traits< k_type, char > k_traits;

  const k_type&
  k () const;

  k_type&
  k ();

  void
  k (const k_type& x);

  void
  k (::std::unique_ptr< k_type > p);

  // fz-up
  //
  typedef ::fz_upType fz_up_type;
  typedef ::xsd::cxx::tree::traits< fz_up_type, char > fz_up_traits;

  const fz_up_type&
  fz_up () const;

  fz_up_type&
  fz_up ();

  void
  fz_up (const fz_up_type& x);

  void
  fz_up (::std::unique_ptr< fz_up_type > p);

  // parallelisation-method
  //
  typedef ::parallelisation_methodType parallelisation_method_type;
  typedef ::xsd::cxx::tree::traits< parallelisation_method_type, char > parallelisation_method_traits;

  const parallelisation_method_type&
  parallelisation_method () const;

  parallelisation_method_type&
  parallelisation_method ();

  void
  parallelisation_method (const parallelisation_method_type& x);

  void
  parallelisation_method (::std::unique_ptr< parallelisation_method_type > p);

  // force-calculation-method
  //
  typedef ::force_calculation_methodType force_calculation_method_type;
  typedef ::xsd::cxx::tree::traits< force_calculation_method_type, char > force_calculation_method_traits;

  const force_calculation_method_type&
  force_calculation_method () const;

  force_calculation_method_type&
  force_calculation_method ();

  void
  force_calculation_method (const force_calculation_method_type& x);

  void
  force_calculation_method (::std::unique_ptr< force_calculation_method_type > p);

  // rl
  //
  typedef ::rlType rl_type;
  typedef ::xsd::cxx::tree::traits< rl_type, char > rl_traits;

  const rl_type&
  rl () const;

  rl_type&
  rl ();

  void
  rl (const rl_type& x);

  void
  rl (::std::unique_ptr< rl_type > p);

  // id
  //
  typedef ::xml_schema::string id_type;
  typedef ::xsd::cxx::tree::optional< id_type > id_optional;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_optional&
  id () const;

  id_optional&
  id ();

  void
  id (const id_type& x);

  void
  id (const id_optional& x);

  void
  id (::std::unique_ptr< id_type > p);

  // Constructors.
  //
  settingsType (const delta_t_type&,
                const end_time_type&,
                const factor_type&,
                const domain_size_type&,
                const rcutoff_type&,
                const x1_boundary_condition_type&,
                const x2_boundary_condition_type&,
                const y1_boundary_condition_type&,
                const y2_boundary_condition_type&,
                const z1_boundary_condition_type&,
                const z2_boundary_condition_type&,
                const brownian_motion_type&,
                const initial_temperature_type&,
                const n_thermostat_type&,
                const target_temperature_type&,
                const temperature_difference_type&,
                const gravitation_type&,
                const r0_type&,
                const k_type&,
                const fz_up_type&,
                const parallelisation_method_type&,
                const force_calculation_method_type&,
                const rl_type&);

  settingsType (::std::unique_ptr< delta_t_type >,
                ::std::unique_ptr< end_time_type >,
                ::std::unique_ptr< factor_type >,
                ::std::unique_ptr< domain_size_type >,
                ::std::unique_ptr< rcutoff_type >,
                ::std::unique_ptr< x1_boundary_condition_type >,
                ::std::unique_ptr< x2_boundary_condition_type >,
                ::std::unique_ptr< y1_boundary_condition_type >,
                ::std::unique_ptr< y2_boundary_condition_type >,
                ::std::unique_ptr< z1_boundary_condition_type >,
                ::std::unique_ptr< z2_boundary_condition_type >,
                ::std::unique_ptr< brownian_motion_type >,
                ::std::unique_ptr< initial_temperature_type >,
                ::std::unique_ptr< n_thermostat_type >,
                ::std::unique_ptr< target_temperature_type >,
                ::std::unique_ptr< temperature_difference_type >,
                ::std::unique_ptr< gravitation_type >,
                ::std::unique_ptr< r0_type >,
                ::std::unique_ptr< k_type >,
                ::std::unique_ptr< fz_up_type >,
                ::std::unique_ptr< parallelisation_method_type >,
                ::std::unique_ptr< force_calculation_method_type >,
                ::std::unique_ptr< rl_type >);

  settingsType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  settingsType (const settingsType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual settingsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  settingsType&
  operator= (const settingsType& x);

  virtual 
  ~settingsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< delta_t_type > delta_t_;
  ::xsd::cxx::tree::one< end_time_type > end_time_;
  ::xsd::cxx::tree::one< factor_type > factor_;
  ::xsd::cxx::tree::one< domain_size_type > domain_size_;
  ::xsd::cxx::tree::one< rcutoff_type > rcutoff_;
  ::xsd::cxx::tree::one< x1_boundary_condition_type > x1_boundary_condition_;
  ::xsd::cxx::tree::one< x2_boundary_condition_type > x2_boundary_condition_;
  ::xsd::cxx::tree::one< y1_boundary_condition_type > y1_boundary_condition_;
  ::xsd::cxx::tree::one< y2_boundary_condition_type > y2_boundary_condition_;
  ::xsd::cxx::tree::one< z1_boundary_condition_type > z1_boundary_condition_;
  ::xsd::cxx::tree::one< z2_boundary_condition_type > z2_boundary_condition_;
  ::xsd::cxx::tree::one< brownian_motion_type > brownian_motion_;
  ::xsd::cxx::tree::one< initial_temperature_type > initial_temperature_;
  ::xsd::cxx::tree::one< n_thermostat_type > n_thermostat_;
  ::xsd::cxx::tree::one< target_temperature_type > target_temperature_;
  ::xsd::cxx::tree::one< temperature_difference_type > temperature_difference_;
  ::xsd::cxx::tree::one< gravitation_type > gravitation_;
  ::xsd::cxx::tree::one< r0_type > r0_;
  ::xsd::cxx::tree::one< k_type > k_;
  ::xsd::cxx::tree::one< fz_up_type > fz_up_;
  ::xsd::cxx::tree::one< parallelisation_method_type > parallelisation_method_;
  ::xsd::cxx::tree::one< force_calculation_method_type > force_calculation_method_;
  ::xsd::cxx::tree::one< rl_type > rl_;
  id_optional id_;
};

class write_checkpointType: public ::xml_schema::string
{
  public:
  // bol
  //
  typedef ::xml_schema::string bol_type;
  typedef ::xsd::cxx::tree::optional< bol_type > bol_optional;
  typedef ::xsd::cxx::tree::traits< bol_type, char > bol_traits;

  const bol_optional&
  bol () const;

  bol_optional&
  bol ();

  void
  bol (const bol_type& x);

  void
  bol (const bol_optional& x);

  void
  bol (::std::unique_ptr< bol_type > p);

  // Constructors.
  //
  write_checkpointType ();

  write_checkpointType (const char*);

  write_checkpointType (const ::std::string&);

  write_checkpointType (const ::xml_schema::string&);

  write_checkpointType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  write_checkpointType (const write_checkpointType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual write_checkpointType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  write_checkpointType&
  operator= (const write_checkpointType& x);

  virtual 
  ~write_checkpointType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  bol_optional bol_;
};

class read_checkpointType: public ::xml_schema::string
{
  public:
  // bol
  //
  typedef ::xml_schema::string bol_type;
  typedef ::xsd::cxx::tree::optional< bol_type > bol_optional;
  typedef ::xsd::cxx::tree::traits< bol_type, char > bol_traits;

  const bol_optional&
  bol () const;

  bol_optional&
  bol ();

  void
  bol (const bol_type& x);

  void
  bol (const bol_optional& x);

  void
  bol (::std::unique_ptr< bol_type > p);

  // Constructors.
  //
  read_checkpointType ();

  read_checkpointType (const char*);

  read_checkpointType (const ::std::string&);

  read_checkpointType (const ::xml_schema::string&);

  read_checkpointType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  read_checkpointType (const read_checkpointType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual read_checkpointType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  read_checkpointType&
  operator= (const read_checkpointType& x);

  virtual 
  ~read_checkpointType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  bol_optional bol_;
};

class write_checkpoint_timeType: public ::xml_schema::string
{
  public:
  // t
  //
  typedef ::xml_schema::string t_type;
  typedef ::xsd::cxx::tree::optional< t_type > t_optional;
  typedef ::xsd::cxx::tree::traits< t_type, char > t_traits;

  const t_optional&
  t () const;

  t_optional&
  t ();

  void
  t (const t_type& x);

  void
  t (const t_optional& x);

  void
  t (::std::unique_ptr< t_type > p);

  // Constructors.
  //
  write_checkpoint_timeType ();

  write_checkpoint_timeType (const char*);

  write_checkpoint_timeType (const ::std::string&);

  write_checkpoint_timeType (const ::xml_schema::string&);

  write_checkpoint_timeType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  write_checkpoint_timeType (const write_checkpoint_timeType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual write_checkpoint_timeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  write_checkpoint_timeType&
  operator= (const write_checkpoint_timeType& x);

  virtual 
  ~write_checkpoint_timeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  t_optional t_;
};

class checkpointType: public ::xml_schema::type
{
  public:
  // write-checkpoint
  //
  typedef ::write_checkpointType write_checkpoint_type;
  typedef ::xsd::cxx::tree::traits< write_checkpoint_type, char > write_checkpoint_traits;

  const write_checkpoint_type&
  write_checkpoint () const;

  write_checkpoint_type&
  write_checkpoint ();

  void
  write_checkpoint (const write_checkpoint_type& x);

  void
  write_checkpoint (::std::unique_ptr< write_checkpoint_type > p);

  // read-checkpoint
  //
  typedef ::read_checkpointType read_checkpoint_type;
  typedef ::xsd::cxx::tree::traits< read_checkpoint_type, char > read_checkpoint_traits;

  const read_checkpoint_type&
  read_checkpoint () const;

  read_checkpoint_type&
  read_checkpoint ();

  void
  read_checkpoint (const read_checkpoint_type& x);

  void
  read_checkpoint (::std::unique_ptr< read_checkpoint_type > p);

  // write-checkpoint-time
  //
  typedef ::write_checkpoint_timeType write_checkpoint_time_type;
  typedef ::xsd::cxx::tree::traits< write_checkpoint_time_type, char > write_checkpoint_time_traits;

  const write_checkpoint_time_type&
  write_checkpoint_time () const;

  write_checkpoint_time_type&
  write_checkpoint_time ();

  void
  write_checkpoint_time (const write_checkpoint_time_type& x);

  void
  write_checkpoint_time (::std::unique_ptr< write_checkpoint_time_type > p);

  // id
  //
  typedef ::xml_schema::string id_type;
  typedef ::xsd::cxx::tree::optional< id_type > id_optional;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_optional&
  id () const;

  id_optional&
  id ();

  void
  id (const id_type& x);

  void
  id (const id_optional& x);

  void
  id (::std::unique_ptr< id_type > p);

  // Constructors.
  //
  checkpointType (const write_checkpoint_type&,
                  const read_checkpoint_type&,
                  const write_checkpoint_time_type&);

  checkpointType (::std::unique_ptr< write_checkpoint_type >,
                  ::std::unique_ptr< read_checkpoint_type >,
                  ::std::unique_ptr< write_checkpoint_time_type >);

  checkpointType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  checkpointType (const checkpointType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual checkpointType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  checkpointType&
  operator= (const checkpointType& x);

  virtual 
  ~checkpointType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< write_checkpoint_type > write_checkpoint_;
  ::xsd::cxx::tree::one< read_checkpoint_type > read_checkpoint_;
  ::xsd::cxx::tree::one< write_checkpoint_time_type > write_checkpoint_time_;
  id_optional id_;
};

class typeType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  typeType ();

  typeType (const char*);

  typeType (const ::std::string&);

  typeType (const ::xml_schema::string&);

  typeType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  typeType (const typeType& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual typeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  typeType&
  operator= (const typeType& x);

  virtual 
  ~typeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class epsilonType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  epsilonType ();

  epsilonType (const char*);

  epsilonType (const ::std::string&);

  epsilonType (const ::xml_schema::string&);

  epsilonType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  epsilonType (const epsilonType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual epsilonType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  epsilonType&
  operator= (const epsilonType& x);

  virtual 
  ~epsilonType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class sigmaType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  sigmaType ();

  sigmaType (const char*);

  sigmaType (const ::std::string&);

  sigmaType (const ::xml_schema::string&);

  sigmaType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  sigmaType (const sigmaType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual sigmaType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  sigmaType&
  operator= (const sigmaType& x);

  virtual 
  ~sigmaType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class centreType: public ::xml_schema::string
{
  public:
  // x
  //
  typedef ::xml_schema::string x_type;
  typedef ::xsd::cxx::tree::optional< x_type > x_optional;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_optional&
  x () const;

  x_optional&
  x ();

  void
  x (const x_type& x);

  void
  x (const x_optional& x);

  void
  x (::std::unique_ptr< x_type > p);

  // y
  //
  typedef ::xml_schema::string y_type;
  typedef ::xsd::cxx::tree::optional< y_type > y_optional;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_optional&
  y () const;

  y_optional&
  y ();

  void
  y (const y_type& x);

  void
  y (const y_optional& x);

  void
  y (::std::unique_ptr< y_type > p);

  // z
  //
  typedef ::xml_schema::string z_type;
  typedef ::xsd::cxx::tree::optional< z_type > z_optional;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_optional&
  z () const;

  z_optional&
  z ();

  void
  z (const z_type& x);

  void
  z (const z_optional& x);

  void
  z (::std::unique_ptr< z_type > p);

  // Constructors.
  //
  centreType ();

  centreType (const char*);

  centreType (const ::std::string&);

  centreType (const ::xml_schema::string&);

  centreType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  centreType (const centreType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual centreType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  centreType&
  operator= (const centreType& x);

  virtual 
  ~centreType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  x_optional x_;
  y_optional y_;
  z_optional z_;
};

class radiusType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  radiusType ();

  radiusType (const char*);

  radiusType (const ::std::string&);

  radiusType (const ::xml_schema::string&);

  radiusType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  radiusType (const radiusType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual radiusType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  radiusType&
  operator= (const radiusType& x);

  virtual 
  ~radiusType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class velocityType: public ::xml_schema::string
{
  public:
  // x
  //
  typedef ::xml_schema::string x_type;
  typedef ::xsd::cxx::tree::optional< x_type > x_optional;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_optional&
  x () const;

  x_optional&
  x ();

  void
  x (const x_type& x);

  void
  x (const x_optional& x);

  void
  x (::std::unique_ptr< x_type > p);

  // y
  //
  typedef ::xml_schema::string y_type;
  typedef ::xsd::cxx::tree::optional< y_type > y_optional;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_optional&
  y () const;

  y_optional&
  y ();

  void
  y (const y_type& x);

  void
  y (const y_optional& x);

  void
  y (::std::unique_ptr< y_type > p);

  // z
  //
  typedef ::xml_schema::string z_type;
  typedef ::xsd::cxx::tree::optional< z_type > z_optional;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_optional&
  z () const;

  z_optional&
  z ();

  void
  z (const z_type& x);

  void
  z (const z_optional& x);

  void
  z (::std::unique_ptr< z_type > p);

  // Constructors.
  //
  velocityType ();

  velocityType (const char*);

  velocityType (const ::std::string&);

  velocityType (const ::xml_schema::string&);

  velocityType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  velocityType (const velocityType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual velocityType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  velocityType&
  operator= (const velocityType& x);

  virtual 
  ~velocityType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  x_optional x_;
  y_optional y_;
  z_optional z_;
};

class massType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  massType ();

  massType (const char*);

  massType (const ::std::string&);

  massType (const ::xml_schema::string&);

  massType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  massType (const massType& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual massType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  massType&
  operator= (const massType& x);

  virtual 
  ~massType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class hType: public ::xml_schema::string
{
  public:
  // val
  //
  typedef ::xml_schema::string val_type;
  typedef ::xsd::cxx::tree::optional< val_type > val_optional;
  typedef ::xsd::cxx::tree::traits< val_type, char > val_traits;

  const val_optional&
  val () const;

  val_optional&
  val ();

  void
  val (const val_type& x);

  void
  val (const val_optional& x);

  void
  val (::std::unique_ptr< val_type > p);

  // Constructors.
  //
  hType ();

  hType (const char*);

  hType (const ::std::string&);

  hType (const ::xml_schema::string&);

  hType (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  hType (const hType& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual hType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  hType&
  operator= (const hType& x);

  virtual 
  ~hType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  val_optional val_;
};

class sphereType: public ::xml_schema::type
{
  public:
  // type
  //
  typedef ::typeType type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::unique_ptr< type_type > p);

  // epsilon
  //
  typedef ::epsilonType epsilon_type;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char > epsilon_traits;

  const epsilon_type&
  epsilon () const;

  epsilon_type&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  void
  epsilon (::std::unique_ptr< epsilon_type > p);

  // sigma
  //
  typedef ::sigmaType sigma_type;
  typedef ::xsd::cxx::tree::traits< sigma_type, char > sigma_traits;

  const sigma_type&
  sigma () const;

  sigma_type&
  sigma ();

  void
  sigma (const sigma_type& x);

  void
  sigma (::std::unique_ptr< sigma_type > p);

  // centre
  //
  typedef ::centreType centre_type;
  typedef ::xsd::cxx::tree::traits< centre_type, char > centre_traits;

  const centre_type&
  centre () const;

  centre_type&
  centre ();

  void
  centre (const centre_type& x);

  void
  centre (::std::unique_ptr< centre_type > p);

  // radius
  //
  typedef ::radiusType radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  void
  radius (::std::unique_ptr< radius_type > p);

  // velocity
  //
  typedef ::velocityType velocity_type;
  typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

  const velocity_type&
  velocity () const;

  velocity_type&
  velocity ();

  void
  velocity (const velocity_type& x);

  void
  velocity (::std::unique_ptr< velocity_type > p);

  // mass
  //
  typedef ::massType mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  void
  mass (::std::unique_ptr< mass_type > p);

  // h
  //
  typedef ::hType h_type;
  typedef ::xsd::cxx::tree::traits< h_type, char > h_traits;

  const h_type&
  h () const;

  h_type&
  h ();

  void
  h (const h_type& x);

  void
  h (::std::unique_ptr< h_type > p);

  // id
  //
  typedef ::xml_schema::string id_type;
  typedef ::xsd::cxx::tree::optional< id_type > id_optional;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_optional&
  id () const;

  id_optional&
  id ();

  void
  id (const id_type& x);

  void
  id (const id_optional& x);

  void
  id (::std::unique_ptr< id_type > p);

  // Constructors.
  //
  sphereType (const type_type&,
              const epsilon_type&,
              const sigma_type&,
              const centre_type&,
              const radius_type&,
              const velocity_type&,
              const mass_type&,
              const h_type&);

  sphereType (::std::unique_ptr< type_type >,
              ::std::unique_ptr< epsilon_type >,
              ::std::unique_ptr< sigma_type >,
              ::std::unique_ptr< centre_type >,
              ::std::unique_ptr< radius_type >,
              ::std::unique_ptr< velocity_type >,
              ::std::unique_ptr< mass_type >,
              ::std::unique_ptr< h_type >);

  sphereType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  sphereType (const sphereType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual sphereType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  sphereType&
  operator= (const sphereType& x);

  virtual 
  ~sphereType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< epsilon_type > epsilon_;
  ::xsd::cxx::tree::one< sigma_type > sigma_;
  ::xsd::cxx::tree::one< centre_type > centre_;
  ::xsd::cxx::tree::one< radius_type > radius_;
  ::xsd::cxx::tree::one< velocity_type > velocity_;
  ::xsd::cxx::tree::one< mass_type > mass_;
  ::xsd::cxx::tree::one< h_type > h_;
  id_optional id_;
};

class right_top_pointType: public ::xml_schema::string
{
  public:
  // x
  //
  typedef ::xml_schema::string x_type;
  typedef ::xsd::cxx::tree::optional< x_type > x_optional;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_optional&
  x () const;

  x_optional&
  x ();

  void
  x (const x_type& x);

  void
  x (const x_optional& x);

  void
  x (::std::unique_ptr< x_type > p);

  // y
  //
  typedef ::xml_schema::string y_type;
  typedef ::xsd::cxx::tree::optional< y_type > y_optional;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_optional&
  y () const;

  y_optional&
  y ();

  void
  y (const y_type& x);

  void
  y (const y_optional& x);

  void
  y (::std::unique_ptr< y_type > p);

  // z
  //
  typedef ::xml_schema::string z_type;
  typedef ::xsd::cxx::tree::optional< z_type > z_optional;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_optional&
  z () const;

  z_optional&
  z ();

  void
  z (const z_type& x);

  void
  z (const z_optional& x);

  void
  z (::std::unique_ptr< z_type > p);

  // Constructors.
  //
  right_top_pointType ();

  right_top_pointType (const char*);

  right_top_pointType (const ::std::string&);

  right_top_pointType (const ::xml_schema::string&);

  right_top_pointType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  right_top_pointType (const right_top_pointType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual right_top_pointType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  right_top_pointType&
  operator= (const right_top_pointType& x);

  virtual 
  ~right_top_pointType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  x_optional x_;
  y_optional y_;
  z_optional z_;
};

class side_lengthsType: public ::xml_schema::string
{
  public:
  // x
  //
  typedef ::xml_schema::string x_type;
  typedef ::xsd::cxx::tree::optional< x_type > x_optional;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_optional&
  x () const;

  x_optional&
  x ();

  void
  x (const x_type& x);

  void
  x (const x_optional& x);

  void
  x (::std::unique_ptr< x_type > p);

  // y
  //
  typedef ::xml_schema::string y_type;
  typedef ::xsd::cxx::tree::optional< y_type > y_optional;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_optional&
  y () const;

  y_optional&
  y ();

  void
  y (const y_type& x);

  void
  y (const y_optional& x);

  void
  y (::std::unique_ptr< y_type > p);

  // z
  //
  typedef ::xml_schema::string z_type;
  typedef ::xsd::cxx::tree::optional< z_type > z_optional;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_optional&
  z () const;

  z_optional&
  z ();

  void
  z (const z_type& x);

  void
  z (const z_optional& x);

  void
  z (::std::unique_ptr< z_type > p);

  // Constructors.
  //
  side_lengthsType ();

  side_lengthsType (const char*);

  side_lengthsType (const ::std::string&);

  side_lengthsType (const ::xml_schema::string&);

  side_lengthsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  side_lengthsType (const side_lengthsType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual side_lengthsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  side_lengthsType&
  operator= (const side_lengthsType& x);

  virtual 
  ~side_lengthsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  x_optional x_;
  y_optional y_;
  z_optional z_;
};

class membraneType: public ::xml_schema::string
{
  public:
  // bol
  //
  typedef ::xml_schema::string bol_type;
  typedef ::xsd::cxx::tree::optional< bol_type > bol_optional;
  typedef ::xsd::cxx::tree::traits< bol_type, char > bol_traits;

  const bol_optional&
  bol () const;

  bol_optional&
  bol ();

  void
  bol (const bol_type& x);

  void
  bol (const bol_optional& x);

  void
  bol (::std::unique_ptr< bol_type > p);

  // Constructors.
  //
  membraneType ();

  membraneType (const char*);

  membraneType (const ::std::string&);

  membraneType (const ::xml_schema::string&);

  membraneType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  membraneType (const membraneType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual membraneType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  membraneType&
  operator= (const membraneType& x);

  virtual 
  ~membraneType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  bol_optional bol_;
};

class cuboidType: public ::xml_schema::type
{
  public:
  // type
  //
  typedef ::typeType type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::unique_ptr< type_type > p);

  // epsilon
  //
  typedef ::epsilonType epsilon_type;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char > epsilon_traits;

  const epsilon_type&
  epsilon () const;

  epsilon_type&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  void
  epsilon (::std::unique_ptr< epsilon_type > p);

  // sigma
  //
  typedef ::sigmaType sigma_type;
  typedef ::xsd::cxx::tree::traits< sigma_type, char > sigma_traits;

  const sigma_type&
  sigma () const;

  sigma_type&
  sigma ();

  void
  sigma (const sigma_type& x);

  void
  sigma (::std::unique_ptr< sigma_type > p);

  // right-top-point
  //
  typedef ::right_top_pointType right_top_point_type;
  typedef ::xsd::cxx::tree::traits< right_top_point_type, char > right_top_point_traits;

  const right_top_point_type&
  right_top_point () const;

  right_top_point_type&
  right_top_point ();

  void
  right_top_point (const right_top_point_type& x);

  void
  right_top_point (::std::unique_ptr< right_top_point_type > p);

  // side-lengths
  //
  typedef ::side_lengthsType side_lengths_type;
  typedef ::xsd::cxx::tree::traits< side_lengths_type, char > side_lengths_traits;

  const side_lengths_type&
  side_lengths () const;

  side_lengths_type&
  side_lengths ();

  void
  side_lengths (const side_lengths_type& x);

  void
  side_lengths (::std::unique_ptr< side_lengths_type > p);

  // velocity
  //
  typedef ::velocityType velocity_type;
  typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

  const velocity_type&
  velocity () const;

  velocity_type&
  velocity ();

  void
  velocity (const velocity_type& x);

  void
  velocity (::std::unique_ptr< velocity_type > p);

  // mass
  //
  typedef ::massType mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  void
  mass (::std::unique_ptr< mass_type > p);

  // h
  //
  typedef ::hType h_type;
  typedef ::xsd::cxx::tree::traits< h_type, char > h_traits;

  const h_type&
  h () const;

  h_type&
  h ();

  void
  h (const h_type& x);

  void
  h (::std::unique_ptr< h_type > p);

  // membrane
  //
  typedef ::membraneType membrane_type;
  typedef ::xsd::cxx::tree::traits< membrane_type, char > membrane_traits;

  const membrane_type&
  membrane () const;

  membrane_type&
  membrane ();

  void
  membrane (const membrane_type& x);

  void
  membrane (::std::unique_ptr< membrane_type > p);

  // id
  //
  typedef ::xml_schema::string id_type;
  typedef ::xsd::cxx::tree::optional< id_type > id_optional;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_optional&
  id () const;

  id_optional&
  id ();

  void
  id (const id_type& x);

  void
  id (const id_optional& x);

  void
  id (::std::unique_ptr< id_type > p);

  // Constructors.
  //
  cuboidType (const type_type&,
              const epsilon_type&,
              const sigma_type&,
              const right_top_point_type&,
              const side_lengths_type&,
              const velocity_type&,
              const mass_type&,
              const h_type&,
              const membrane_type&);

  cuboidType (::std::unique_ptr< type_type >,
              ::std::unique_ptr< epsilon_type >,
              ::std::unique_ptr< sigma_type >,
              ::std::unique_ptr< right_top_point_type >,
              ::std::unique_ptr< side_lengths_type >,
              ::std::unique_ptr< velocity_type >,
              ::std::unique_ptr< mass_type >,
              ::std::unique_ptr< h_type >,
              ::std::unique_ptr< membrane_type >);

  cuboidType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  cuboidType (const cuboidType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual cuboidType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  cuboidType&
  operator= (const cuboidType& x);

  virtual 
  ~cuboidType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< epsilon_type > epsilon_;
  ::xsd::cxx::tree::one< sigma_type > sigma_;
  ::xsd::cxx::tree::one< right_top_point_type > right_top_point_;
  ::xsd::cxx::tree::one< side_lengths_type > side_lengths_;
  ::xsd::cxx::tree::one< velocity_type > velocity_;
  ::xsd::cxx::tree::one< mass_type > mass_;
  ::xsd::cxx::tree::one< h_type > h_;
  ::xsd::cxx::tree::one< membrane_type > membrane_;
  id_optional id_;
};

class shapesType: public ::xml_schema::type
{
  public:
  // settings
  //
  typedef ::settingsType settings_type;
  typedef ::xsd::cxx::tree::traits< settings_type, char > settings_traits;

  const settings_type&
  settings () const;

  settings_type&
  settings ();

  void
  settings (const settings_type& x);

  void
  settings (::std::unique_ptr< settings_type > p);

  // checkpoint
  //
  typedef ::checkpointType checkpoint_type;
  typedef ::xsd::cxx::tree::optional< checkpoint_type > checkpoint_optional;
  typedef ::xsd::cxx::tree::traits< checkpoint_type, char > checkpoint_traits;

  const checkpoint_optional&
  checkpoint () const;

  checkpoint_optional&
  checkpoint ();

  void
  checkpoint (const checkpoint_type& x);

  void
  checkpoint (const checkpoint_optional& x);

  void
  checkpoint (::std::unique_ptr< checkpoint_type > p);

  // sphere
  //
  typedef ::sphereType sphere_type;
  typedef ::xsd::cxx::tree::sequence< sphere_type > sphere_sequence;
  typedef sphere_sequence::iterator sphere_iterator;
  typedef sphere_sequence::const_iterator sphere_const_iterator;
  typedef ::xsd::cxx::tree::traits< sphere_type, char > sphere_traits;

  const sphere_sequence&
  sphere () const;

  sphere_sequence&
  sphere ();

  void
  sphere (const sphere_sequence& s);

  // cuboid
  //
  typedef ::cuboidType cuboid_type;
  typedef ::xsd::cxx::tree::sequence< cuboid_type > cuboid_sequence;
  typedef cuboid_sequence::iterator cuboid_iterator;
  typedef cuboid_sequence::const_iterator cuboid_const_iterator;
  typedef ::xsd::cxx::tree::traits< cuboid_type, char > cuboid_traits;

  const cuboid_sequence&
  cuboid () const;

  cuboid_sequence&
  cuboid ();

  void
  cuboid (const cuboid_sequence& s);

  // Constructors.
  //
  shapesType (const settings_type&);

  shapesType (::std::unique_ptr< settings_type >);

  shapesType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  shapesType (const shapesType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual shapesType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  shapesType&
  operator= (const shapesType& x);

  virtual 
  ~shapesType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< settings_type > settings_;
  checkpoint_optional checkpoint_;
  sphere_sequence sphere_;
  cuboid_sequence cuboid_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::shapesType >
shapes (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::shapesType >
shapes (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::shapesType >
shapes (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::shapesType >
shapes (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::shapesType >
shapes (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::shapesType >
shapes (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::shapesType >
shapes (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::shapesType >
shapes (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::shapesType >
shapes (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::shapesType >
shapes (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::shapesType >
shapes (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::shapesType >
shapes (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::shapesType >
shapes (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::shapesType >
shapes (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SHAPES_HXX
